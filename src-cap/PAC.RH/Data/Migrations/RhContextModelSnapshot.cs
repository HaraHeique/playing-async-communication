// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PAC.RH.Data;

#nullable disable

namespace PAC.RH.Data.Migrations
{
    [DbContext(typeof(RhContext))]
    partial class RhContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PAC.RH.Models.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Desligado")
                        .HasColumnType("BIT");

                    b.Property<decimal>("SalarioBruto")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("SalarioBruto");

                    b.Property<int>("Setor")
                        .HasColumnType("INT")
                        .HasColumnName("Setor");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios", "Rh");
                });

            modelBuilder.Entity("PAC.RH.Models.Funcionario", b =>
                {
                    b.OwnsOne("PAC.RH.Models.DocumentoPessoal", "DocumentosPessoais", b1 =>
                        {
                            b1.Property<Guid>("FuncionarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasColumnType("VARCHAR(11)")
                                .HasColumnName("Cpf");

                            b1.Property<string>("Rg")
                                .IsRequired()
                                .HasColumnType("VARCHAR(9)")
                                .HasColumnName("Rg");

                            b1.HasKey("FuncionarioId");

                            b1.ToTable("Funcionarios", "Rh");

                            b1.WithOwner()
                                .HasForeignKey("FuncionarioId");
                        });

                    b.OwnsOne("PAC.RH.Models.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("FuncionarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Empresarial")
                                .IsRequired()
                                .HasColumnType("VARCHAR(254)")
                                .HasColumnName("EmailEmpresarial");

                            b1.Property<string>("Pessoal")
                                .IsRequired()
                                .HasColumnType("VARCHAR(254)")
                                .HasColumnName("EmailPessoal");

                            b1.HasKey("FuncionarioId");

                            b1.ToTable("Funcionarios", "Rh");

                            b1.WithOwner()
                                .HasForeignKey("FuncionarioId");
                        });

                    b.OwnsOne("PAC.RH.Models.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("FuncionarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("VARCHAR(128)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("VARCHAR(8)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("VARCHAR(128)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .HasColumnType("VARCHAR(250)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("VARCHAR(128)")
                                .HasColumnName("Estado");

                            b1.Property<int?>("Numero")
                                .HasColumnType("INT")
                                .HasColumnName("Numero");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasColumnType("VARCHAR(128)")
                                .HasColumnName("Rua");

                            b1.HasKey("FuncionarioId");

                            b1.ToTable("Funcionarios", "Rh");

                            b1.WithOwner()
                                .HasForeignKey("FuncionarioId");
                        });

                    b.OwnsOne("PAC.RH.Models.NomeCompleto", "NomeCompleto", b1 =>
                        {
                            b1.Property<Guid>("FuncionarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Apelido")
                                .HasColumnType("VARCHAR(200)")
                                .HasColumnName("Apelido");

                            b1.Property<string>("Nome")
                                .IsRequired()
                                .HasColumnType("VARCHAR(200)")
                                .HasColumnName("Nome");

                            b1.HasKey("FuncionarioId");

                            b1.ToTable("Funcionarios", "Rh");

                            b1.WithOwner()
                                .HasForeignKey("FuncionarioId");
                        });

                    b.Navigation("DocumentosPessoais")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("NomeCompleto")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
